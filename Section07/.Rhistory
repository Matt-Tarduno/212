SIC <- log(SSR/n) + (k/n) * log(n)
assign("y_hat", y_hat, .GlobalEnv)
# Return beta_hat
return(c(beta_hat, R, R_uc, R_adj, AIC, SIC, R, R_adj))
}
# Q.14 Regress CO2pc on GDPpc without an intercept ----------------------------------------------------------------
b1<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc"))[1] #first element is regression coef.
lm(wb_data$CO2pc~wb_data$GDPpc +0) #test
# Regress CO2pc*1000 on GDPpc without an intercept
wb_data$CO2pc<-wb_data$CO2pc*1000
b2<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc"))[1]
#Regress CO2pc*1000 on GDPpc/1000 without an intercept
wb_data$GDPpc<-wb_data$GDPpc/1000
b3<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc"))[1]
# Q.15 R-Squared ----------------------------------------------------------------
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc +0))$adj.r.squared
Q15<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc"))
#R-squared
# output: beta_hat, R, R_uc, R_adj,  AIC, SIC, sv
R_uc<-Q15[3]
R_adj<-Q15[4]
R<-Q15[2]
AIC<-Q15[5]
SIC<-Q15[6]
sv<-Q15[7]
wb_data$y_hat<-y_hat
wb_data$residual<-wb_data$CO2pc - wb_data$y_hat
#Plot of predicted value vs co2pc
scatter_predict_co2<-ggplot(wb_data, aes(x=y_pred, y=CO2pc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Predicted values",
y= "Per-Capita CO2",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme
scatter_predict_co2
#Plot of residuals vs gdppc
scatter_residuals_gdppc<-ggplot(wb_data, aes(y=residual, x=GDPpc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Per-Capita GDP",
y= "residuals",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme + geom_hline(yintercept=0, linetype = "longdash", col = "red")
scatter_residuals_gdppc
#Q16: Regression with intercept ------------------------------------------------------
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc +0))$adj.r.squared
Q16<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc"), T)
#R-squared
# output: beta_hat, R, R_uc, R_adj,  AIC, SIC, sv
R_uc<-Q16[4]
R_adj<-Q16[5]
R<-Q16[3]
AIC<-Q16[6]
SIC<-Q16[7]
sv<-Q16[8]
wb_data$y_hat<-y_hat
wb_data$residual<-wb_data$CO2pc - wb_data$y_hat
#Plot of predicted value vs co2pc
scatter_predict_co2<-ggplot(wb_data, aes(x=y_pred, y=CO2pc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Predicted values",
y= "Per-Capita CO2",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme
scatter_predict_co2
#Plot of residuals vs gdppc ------------------------------------------------------
scatter_residuals_gdppc<-ggplot(wb_data, aes(y=residual, x=GDPpc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Per-Capita GDP",
y= "residuals",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme + geom_hline(yintercept=0, linetype = "longdash", col = "red")
scatter_residuals_gdppc
# Q.17 : Polynomial order 2 ----------------------------------------------------
wb_data$GDPpc2 <- wb_data$GDPpc ** 2
Q17<-b_ols(data = wb_data, y="CO2pc", X=c("GDPpc", "GDPpc2"), T)
lm(wb_data$CO2pc~wb_data$GDPpc + wb_data$GDPpc2) #test
R_uc<-Q17[5]
R_adj<-Q17[6]
R<-Q17[4]
AIC<-Q17[7]
SIC<-Q17[8]
sv<-Q17[9]
wb_data$y_hat<-y_hat
wb_data$residual<-wb_data$CO2pc - wb_data$y_hat
#Plot of predicted value vs co2pc
scatter_predict_co2<-ggplot(wb_data, aes(x=y_pred, y=CO2pc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Predicted values",
y= "Per-Capita CO2",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme
scatter_predict_co2
#Plot of residuals vs gdppc
scatter_residuals_gdppc2<-ggplot(wb_data, aes(y=residual, x=GDPpc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3)+
#ggtitle(expression(Log~of~Per-Capita~CO[2]~Emissions~vs.~Log~of~Per-Capita~GDP~"(Demeaned)")) +
labs(
x= "Per-Capita GDP",
y= "residuals",
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme + geom_hline(yintercept=0, linetype = "longdash", col = "red")
scatter_residuals_gdppc2
# Q.18 ---------------------------------------------------------------
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev"), T)
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev) #test
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev"))
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev) #test
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev2", "GDPpcdev2"))
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev +0) #test
Q18
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpcdev2"))
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpcdev2"))
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev +0) #test
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpcdev2"))
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpc2dev"))
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev +0) #test
wb_data$GDPpc2dev<-wb_data$GDPpc2-mean(wb_data$GDPpc2)
Q18<-b_ols(data = wb_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpc2dev"))
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev +0) #test
Q18
df<-select(wb_data, GDPpcdev)
df$intercept <- "1"
x<-as.matrix(sapply(df, as.numeric))
y<-wb_data$CO2pcdev
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
wb_data$y_pred<-y_pred
wb_data$residual <- y-wb_data$y_pred
df<-select(wb_data, GDPpc2)
df$intercept <- "1"
y<-as.matrix(sapply(df, as.numeric))
x<-wb_data$GDPpc
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
b
lm(wb_data$CO2pcdev~wb_data$GDPpcdev + wb_data$GDPpc2dev) #test
# From last week ----
# Make a quick plot with 'qplot'
ggplot2::qplot(x = rnorm(100), y = rnorm(100), geom = "point")
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(dplyr, magrittr, parallel, ggplot2, ggthemes, viridis, lfe)
# Directory
setwd("/Users/matthewtarduno/Desktop/212/Section07")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Set the seed
set.seed(12345)
# Set population size, N
N <- 1e5
# Set alpha and beta
alpha <- 0.5
beta <- 1.5
# Create the population data: intercept (i) and X
pop_df <- data.frame(
i = 1,
x = runif(n = N, min = 0, max = 2000)
) %>% tbl_df()
# Generate error term, e
pop_df %<>% mutate(
e = rnorm(N, mean = 0, sd = sqrt(4 * x^2)))
# Calculate y
pop_df %<>% mutate(y = alpha + beta * x + e)
# Add weights
pop_df %<>% mutate(w = 10/x)
# Apply weights
pop_df %<>% mutate(
y_w = y * w,
i_w = i * w,
x_w = x * w)
# From last week ----
# Make a quick plot with 'qplot'
ggplot2::qplot(x = rnorm(100), y = rnorm(100), geom = "point")
# Setup ----
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(dplyr, magrittr, parallel, ggplot2, ggthemes, viridis, lfe)
# Directory
setwd("/Users/matthewtarduno/Desktop/212/Section07")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Simulation population ----
#   Here we make a population with heteroskedastic standard errors
#   We test the weighted least squares (weighting by "reliability" of information)
#   Upshot: WLS can reduce down to running OLS on transformed variables!
# Set the seed
set.seed(12345)
# Set population size, N
N <- 1e5
# Set alpha and beta
alpha <- 0.5
beta <- 1.5
# Create the population data: intercept (i) and X
pop_df <- data.frame(
i = 1,
x = runif(n = N, min = 0, max = 2000)
) %>% tbl_df()
# Generate error term, e
pop_df %<>% mutate(
e = rnorm(N, mean = 0, sd = sqrt(4 * x^2)))
# Calculate y, as defined above
pop_df %<>% mutate(y = alpha + beta * x + e)
# Add weights (see section notes -- this is w_{i}=1/sqrt(omega_{i}(X))), simplified
pop_df %<>% mutate(w = 10/x)
# Apply weights (don't do this in each iteration, just do it upfront!)
pop_df %<>% mutate(
y_w = y * w,
i_w = i * w,
x_w = x * w)
# From last week ----
# Make a quick plot with 'qplot'
ggplot2::qplot(x = rnorm(100), y = rnorm(100), geom = "point")
# Setup ----
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(dplyr, magrittr, parallel, ggplot2, ggthemes, viridis, lfe)
# Directory
setwd("/Users/matthewtarduno/Desktop/212/Section07")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Simulation population ----
#   Here we make a population with heteroskedastic standard errors
#   We test the weighted least squares (weighting by "reliability" of information)
#   Upshot: WLS can reduce down to running OLS on transformed variables!
# Set the seed
set.seed(12345)
# Set population size, N
N <- 1e5
# Set alpha and beta
alpha <- 0.5
beta <- 1.5
# Create the population data: intercept (i) and X
pop_df <- data.frame(
i = 1,
x = runif(n = N, min = 0, max = 2000)
) %>% tbl_df()
# Generate error term, e
pop_df %<>% mutate(
e = rnorm(N, mean = 0, sd = sqrt(4 * x^2)))
# Calculate y, as defined above
pop_df %<>% mutate(y = alpha + beta * x + e)
# Add weights (see section notes -- this is w_{i}=1/sqrt(omega_{i}(X))), simplified
pop_df %<>% mutate(w = 10/x)
# Apply weights (don't do this in each iteration, just do it upfront!)
pop_df %<>% mutate(
y_w = y * w,
i_w = i * w,
x_w = x * w)
View(pop_df)
# Single iteration function ----
# Function for a single iteration of the simulation
one_run <- function(iter, population) {
# Sample 1000 rows from the population
sample_df <- sample_n(tbl = population, size = 1000)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("i", "x")))
# Calculate the WLS coef. (using weighted variables)
coef_wls <- b_ols(
y = to_matrix(sample_df, "y_w"),
X = to_matrix(sample_df, c("i_w", "x_w")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(c(coef_ols, coef_wls)),
param  = rep(c("int", "coef"), 2),
method = rep(c("ols", "wls"), each = 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Run the simulation 10K times
sim_df <- parLapply(
cl = cl,
X = 1:1e4,
fun = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
# Stop the cluster
stopCluster(cl)
View(sim_df)
# The plot
ggplot(data = filter(sim_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.7) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS") +
scale_fill_viridis("Method", labels = c("OLS", "WLS"),
discrete = T, end = 0.95) +
scale_color_viridis("Method", labels = c("OLS", "WLS"),
discrete = T, end = 0.95) +
theme_ed
# Summarize results
sim_df %>%
group_by(param, method) %>%
summarize(mean(est), sd(est)) %>%
knitr::kable(digits = 4,
col.names = c("Parameter", "Method", "Mean", "Std. Dev."))
# Add the bad weights
pop_df %<>% mutate(v = 10/x^2)
# Weight the observations with the bad weights
pop_df %<>% mutate(
y_v = y * v,
i_v = i * v,
x_v = x * v)
# Update simulation function ----
# Function for a single iteration of the simulation
one_run <- function(iter, population) {
# Sample 1000 rows from the population
sample_df <- sample_n(tbl = population, size = 1000)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("i", "x")))
# Calculate the WLS coef. (using correctly weighted variables)
coef_wls <- b_ols(
y = to_matrix(sample_df, "y_w"),
X = to_matrix(sample_df, c("i_w", "x_w")))
# Calculate the WLS coef. (using incorrectly weighted variables)
coef_wls_bad <- b_ols(
y = to_matrix(sample_df, "y_v"),
X = to_matrix(sample_df, c("i_v", "x_v")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(c(coef_ols, coef_wls, coef_wls_bad)),
param  = rep(c("int", "coef"), 3),
method = rep(c("ols", "wls", "wls bad"), each = 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
# Run simulation (parallelized) ----
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Run the simulation 10,000 times
miss_df <- parLapply(
cl = cl,
X = 1:1e4,
fun = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
# Stop the cluster
stopCluster(cl)
# Plot results ----
# Plot results
ggplot(data = filter(miss_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.7) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS",
subtitle = "Allowing for misspecification in WLS") +
scale_fill_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
scale_color_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
theme_ed
# Zoom in
ggplot(data = filter(miss_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.65) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS",
subtitle = "Allowing for misspecification in WLS") +
xlim(1.5 + c(-1,1) * 2) +
scale_fill_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
scale_color_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
theme_ed
# Numerical summary
miss_df %>%
group_by(param, method) %>%
summarize(mean(est), sd(est)) %>%
knitr::kable(digits = 4,
col.names = c("Parameter", "Method", "Mean", "Std. Dev."))
