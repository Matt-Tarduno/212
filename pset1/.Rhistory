axis.title=element_text(size=14,face="bold"))
# ####################################################
# Q.4 Histograms: CO2, GDP
# ####################################################
CO2_histogram<-ggplot(wb_data, aes(x=CO2)) + geom_histogram(bins=15, color="darkblue", fill="deepskyblue3") + ggtitle("CO2 Histogram")+mytheme
CO2_histogram
GDP_histogram<-ggplot(wb_data, aes(x=GDP)) + geom_histogram(bins=15, color="darkblue", fill="deepskyblue3") + ggtitle("GDP Histogram")+mytheme
GDP_histogram
# ####################################################
# Q.5 Scatterplot: CO2 vs. GDP
# ####################################################
#
library(extrafont)
loadfonts(quiet = T)
CO2_GDP_scatterplot<-ggplot(wb_data, aes(x=GDP, y=CO2)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3) +
ggtitle(expression(CO[2]~Emissions~vs.~GDP)) +
labs(
x= "GDP",
y= expression(CO[2]~Emissions~"[kt]"),
caption = "Note: GDP is in 2010 U.S. Dollars."
) + mytheme
CO2_GDP_scatterplot
# new variables -------------------------------------------------------------------------
# ####################################################
# Q.6 CO2 per capita
# ####################################################
wb_data$CO2pc<-wb_data$CO2/wb_data$POP
# ####################################################
# Q.7 GDP per capita
# ####################################################
wb_data$GDPpc<-wb_data$GDP/wb_data$POP
# ####################################################
# Q.8 Scatterplot: CO2pc vs. GDPpc
# ####################################################
CO2_GDP_pc<-ggplot(wb_data, aes(x=GDPpc, y=CO2pc)) +
geom_point(size=2, shape=19, color="darkblue", alpha=0.3) +
ggtitle(expression(Per-Capita~CO[2]~Emissions~vs.~Per-Capita~GDP)) +
labs(
x= "Per-Capita GDP",
y= expression(Per-Capita~CO[2]~Emissions~"[kt]"),
caption = "Note: Per-Capita GDP is in 2010 U.S. Dollars."
) + mytheme
CO2_GDP_pc
# ####################################################
# Q.9 demean variables
# ####################################################
wb_data$CO2pcdev<-wb_data$CO2pc-mean(wb_data$CO2pc)
wb_data$GDPpcdev<-wb_data$GDPpc-mean(wb_data$GDPpc)
#function goal:
#input x vector, y vector,
#output R's
fit<-function (data, col1, col2) {
x<-data.frame(data[, col1])
y<-as.matrix(data[, col2])
x$intcp <- 1
x<-data.matrix(x)
b<-solve(t(x)%*%x, tol = 1e-22)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
print(y_pred)
print(x)
print(b)
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
fit(wb_data, "C02pc", "GDPpc")
View(wb_data)
fit(wb_data, "CO2pc", "GDPpc")
fit<-function (data, col1, col2) {
x<-data.frame(data[, col2])
y<-as.matrix(data[, col1])
x$intcp <- 1
x<-data.matrix(x)
b<-solve(t(x)%*%x, tol = 1e-22)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
print(y_pred)
print(x)
print(b)
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
fit(wb_data, "CO2pc", "GDPpc")
fit<-function (data, col1, col2) {
x<-data.frame(data[, col2])
y<-as.matrix(data[, col1])
x$intcp <- 1
x<-data.matrix(x)
b<-solve(t(x)%*%x, tol = 1e-22)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
print(y_pred)
print(x)
print(b)
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
fit(wb_data, "CO2pc", "GDPpc")
x<-data.frame(wb_data$GDPpc)
x$intcp <- 1
x<-data.matrix(x)
y<-wb_data$CO2pc
b<-solve((t(x)%*%x))%*%t(x)%*%y
#lm(y~wb_data$GDPpc) #test
#summary(lm(y~x +0))
wb_data$y_pred<-x%*%b #Predicted values
wb_data$residual <- y-wb_data$y_pred
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit(wb_data, "CO2pc", "GDPpc")
fit<-function (data, col1, col2) {
x<-data.frame(data[, col2])
y<-as.matrix(data[, col1])
x$intcp <- 1
x<-data.matrix(x)
b<-solve(t(x)%*%x, tol = 1e-22)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
#Q16: Regression with intercept
x<-data.frame(wb_data$GDPpc)
x$intcp <- 1
x<-data.matrix(x)
y<-wb_data$CO2pc
b<-solve((t(x)%*%x))%*%t(x)%*%y
#lm(y~wb_data$GDPpc) #test
#summary(lm(y~x +0))
wb_data$y_pred<-x%*%b #Predicted values
wb_data$residual <- y-wb_data$y_pred
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit(wb_data, "CO2pc", "GDPpc")
lm(wb_data$CO2pc~wb_data$GDPpc)
summary(lm(wb_data$CO2pc~wb_data$GDPpc))r.squared
summary(lm(wb_data$CO2pc~wb_data$GDPpc))$r.squared
summary(lm(wb_data$CO2pc~wb_data$GDPpc))$adj.r.squared
typeof(y)
a<-sum(y^2)
a
df<-select(wb_data, GDPpcdev)
df$intercept <- "1"
x<-as.matrix(sapply(df, as.numeric))
y<-wb_data$CO2pcdev
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
wb_data$y_pred<-y_pred
wb_data$residual <- y-wb_data$y_pred
df<-select(wb_data, GDPpc2)
df$intercept <- "1"
y<-as.matrix(sapply(df, as.numeric))
x<-wb_data$GDPpc
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
wb_data$GDPpc2 <- wb_data$GDPpc ** 2
df<-select(wb_data, GDPpcdev)
df$intercept <- "1"
x<-as.matrix(sapply(df, as.numeric))
y<-wb_data$CO2pcdev
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
y_pred<-x%*%b #Predicted values
wb_data$y_pred<-y_pred
wb_data$residual <- y-wb_data$y_pred
df<-select(wb_data, GDPpc2)
df$intercept <- "1"
y<-as.matrix(sapply(df, as.numeric))
x<-wb_data$GDPpc
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
fit<-function (data, col1, col2) {
y_pred<-x%*%b #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
#Q16: Regression with intercept
x<-data.frame(wb_data$GDPpc)
x$intcp <- 1
x<-data.matrix(x)
y<-wb_data$CO2pc
b<-solve((t(x)%*%x))%*%t(x)%*%y
#lm(y~wb_data$GDPpc) #test
#summary(lm(y~x +0))
wb_data$y_pred<-x%*%b #Predicted values
wb_data$residual <- y-wb_data$y_pred
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit<-function () {
y_pred<-x%*%b #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
fit()
#Q16: Regression with intercept
x<-data.frame(wb_data$GDPpc)
x$intcp <- 1
x<-data.matrix(x)
y<-wb_data$CO2pc
b<-solve((t(x)%*%x))%*%t(x)%*%y
#lm(y~wb_data$GDPpc) #test
#summary(lm(y~x +0))
wb_data$y_pred<-x%*%b #Predicted values
wb_data$residual <- y-wb_data$y_pred
fit()
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit<-function () {
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
x<-data.frame(wb_data$GDPpc)
x$intcp <- 1
x<-data.matrix(x)
y<-wb_data$CO2pc
b<-solve((t(x)%*%x))%*%t(x)%*%y
#lm(y~wb_data$GDPpc) #test
#summary(lm(y~x +0))
wb_data$y_pred<-x%*%b #Predicted values
wb_data$residual <- y-wb_data$y_pred
fit()
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
wb_data$GDPpc2 <- wb_data$GDPpc ** 2
df<-select(wb_data, GDPpc, GDPpc2)
df$intercept <- "1"
x<-as.matrix(sapply(df, as.numeric))
y<-wb_data$CO2pc
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
lm(wb_data$CO2pc~wb_data$GDPpc + wb_data$GDPpc2) #test
y_pred<-x%*%b #Predicted values
wb_data$y_pred<-y_pred
wb_data$residual <- y-wb_data$y_pred
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
#
R_uc <- R
#
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
wb_data$GDPpc2 <- wb_data$GDPpc ** 2
df<-select(wb_data, GDPpc, GDPpc2)
df$intercept <- "1"
x<-as.matrix(sapply(df, as.numeric))
y<-wb_data$CO2pc
b<-solve(t(x)%*%x, tol = 1e-20)%*%t(x)%*%y
lm(wb_data$CO2pc~wb_data$GDPpc + wb_data$GDPpc2) #test
y_pred<-x%*%b #Predicted values
wb_data$y_pred<-y_pred
wb_data$residual <- y-wb_data$y_pred
fit()
# ####################################################
# Q.14 Regress CO2pc on GDPpc without an intercept
# ####################################################
x<-wb_data$GDPpc #Def
y<-wb_data$CO2pc
b1<-solve((t(x)%*%x))%*%t(x)%*%y
b1
#R-squared
y_pred<-x*c(b1) #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
#Test results
#lm(y~x +0) #test
#summary(lm(y~x +0))
# Regress CO2pc*1000 on GDPpc without an intercept
y<-wb_data$CO2pc*1000
b2<-solve((t(x)%*%x))%*%t(x)%*%y
b2
#R-squared
y_pred<-x*c(b2) #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
#Regress CO2pc*1000 on GDPpc/1000 without an intercept
x<-wb_data$GDPpc/1000
b3<-solve((t(x)%*%x))%*%t(x)%*%y
b3
#R-squared
y_pred<-x*c(b3) #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
print(c(b1, b2, b3))
n <- length(x)
k <- 1
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit()
# ####################################################
# Q.14 Regress CO2pc on GDPpc without an intercept
# ####################################################
x<-wb_data$GDPpc #Def
y<-wb_data$CO2pc
b1<-solve((t(x)%*%x))%*%t(x)%*%y
b1
#R-squared
y_pred<-x*c(b1) #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
wb_data$y_pred <- y_pred # for question 15
wb_data$residual <- y-y_pred # for question 15
#Test results
#lm(y~x +0) #test
#summary(lm(y~x +0))
# Regress CO2pc*1000 on GDPpc without an intercept
y<-wb_data$CO2pc*1000
b2<-solve((t(x)%*%x))%*%t(x)%*%y
b2
#R-squared
y_pred<-x*c(b2) #Predicted values
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
#Regress CO2pc*1000 on GDPpc/1000 without an intercept
x<-as.matrix(wb_data$GDPpc/1000)
b3<-solve((t(x)%*%x))%*%t(x)%*%y
b3
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
1-(SS_res/SS_tot) # R-squared
print(c(b1, b2, b3))
n <- length(x)
k <- 1
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
fit()
# ####################################################
# Q.15 R-Squared
# ####################################################
fit<-function () {
SS_tot<-sum((y)^2) #Total sum of squares (without demeaning, bc no intercept)
SS_reg<-sum((y_pred)^2) #Regression sum of squares
SS_res<-sum((y-y_pred)^2) #Error sum of squares
n <- dim(x)[1]
k <- dim(x)[2]
dof <- n - k # 1 explanatory variable
R <- 1-(SS_res/SS_tot)
R_uc <- R #no intercept anyway
R_adj <- 1 - (1 - R) * ((n-1)/(n-k))
AIC <- log(SS_res/n) + (2*k)/n
SIC <- log(SS_res/n) + (k/n) * log(n)
print(c(AIC,SIC,R,R_adj))
}
#R-squared
y_pred<-x*c(b3) #Predicted values
print(c(b1, b2, b3))
fit()
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc))$r.squared
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc))$adj.r.squared
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc +0))$adj.r.squared
summary(lm(wb_data$CO2pc ~ wb_data$GDPpc +0))$r.squared
getwd()
