library(plm)
library(lattice)
library(zoo)
TABLE 2
Log-linear specification for annual and monthly data
m2.1<-lm(log(gasPerCap)~gasPriceReal+cTaxRealCents+factor(GEO)+factor(Ref_Date)-1,data=Data_Gas_Month_Dom)
m2.2<-lm(log(gasPerCap)~gasPriceReal*GEO-gasPriceReal+cTaxRealCents:BC+cTaxRealCents:QC+factor(Ref_Date)-1,data=Data_Gas_Month_Dom)
summary(m2.1)
summary(m2.2)
nobs(m2.1)
nobs(m2.2)
Heteroskedastic and Autocorrelation Robust Standard Error Estimation
StdErrorm2.1<-vcovHAC(m2.1)
StdErrorm2.2<-vcovHAC(m2.2)
coeftest(m2.1,vcov.=StdErrorm2.1)
coeftest(m2.2,vcov.=StdErrorm2.2)
F-tests for equality of price and tax coefficients
linearHypothesis(m2.1,"gasPriceReal = cTaxRealCents", white.adjust=T)
linearHypothesis(m2.2,"gasPriceReal:GEOBritish Columbia = cTaxRealCents:BC", white.adjust=T)
confint(m2.1,vcov=vcovHAC)
confint(m2.2,vcov=vcovHAC)
TABLE 3
The following code mimics the ivreg2 function in Stata.
This is used to calculate first stage F-stats and Sargan tests where appropriate.
ivreg2 <- function(form,endog,iv,data,digits=3){
library(MASS)
model setup
r1 <- lm(form,data)
y <- r1$fitted.values+r1$resid
x <- model.matrix(r1)
aa <- rbind(endog == colnames(x),1:dim(x)[2])
z <- cbind(x[,aa[2,aa[1,]==0]],data[,iv])
colnames(z)[(dim(z)[2]-length(iv)+1):(dim(z)[2])] <- iv
iv coefficients and standard errors
z <- as.matrix(z)
pz <- z %*% (solve(crossprod(z))) %*% t(z)
biv <- solve(crossprod(x,pz) %*% x) %*% (crossprod(x,pz) %*% y)
sigiv <- crossprod((y - x %*% biv),(y - x %*% biv))/(length(y)-length(biv))
vbiv <- as.numeric(sigiv)*solve(crossprod(x,pz) %*% x)
res <- cbind(biv,sqrt(diag(vbiv)),biv/sqrt(diag(vbiv)),(1-pnorm(biv/sqrt(diag(vbiv))))*2)
res <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),res)),nrow=dim(res)[1])
rownames(res) <- colnames(x)
colnames(res) <- c("Coef","S.E.","t-stat","p-val")
First-stage F-test
y1 <- data[,endog]
z1 <- x[,aa[2,aa[1,]==0]]
bet1 <- solve(crossprod(z)) %*% crossprod(z,y1)
bet2 <- solve(crossprod(z1)) %*% crossprod(z1,y1)
rss1 <- sum((y1 - z %*% bet1)^2)
rss2 <- sum((y1 - z1 %*% bet2)^2)
p1 <- length(bet1)
p2 <- length(bet2)
n1 <- length(y)
fs <- abs((rss2-rss1)/(p2-p1))/(rss1/(n1-p1))
firststage <- c(fs)
firststage <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),firststage)),ncol=length(firststage))
colnames(firststage) <- c("First Stage F-test")
Hausman tests
bols <- solve(crossprod(x)) %*% crossprod(x,y)
sigols <- crossprod((y - x %*% bols),(y - x %*% bols))/(length(y)-length(bols))
vbols <- as.numeric(sigols)*solve(crossprod(x))
sigml <- crossprod((y - x %*% bols),(y - x %*% bols))/(length(y))
x1 <- x[,!(colnames(x) %in% "(Intercept)")]
z1 <- z[,!(colnames(z) %in% "(Intercept)")]
pz1 <- z1 %*% (solve(crossprod(z1))) %*% t(z1)
biv1 <- biv[!(rownames(biv) %in% "(Intercept)"),]
bols1 <- bols[!(rownames(bols) %in% "(Intercept)"),]
Durbin-Wu-Hausman chi-sq test:
haus <- t(biv1-bols1) %*% ginv(as.numeric(sigml)*(solve(crossprod(x1,pz1) %*% x1)-solve(crossprod(x1)))) %*% (biv1-bols1)
hpvl <- 1-pchisq(haus,df=1)
Wu-Hausman F test
resids <- NULL
resids <- cbind(resids,y1 - z %*% solve(crossprod(z)) %*% crossprod(z,y1))
x2 <- cbind(x,resids)
bet1 <- solve(crossprod(x2)) %*% crossprod(x2,y)
bet2 <- solve(crossprod(x)) %*% crossprod(x,y)
rss1 <- sum((y - x2 %*% bet1)^2)
rss2 <- sum((y - x %*% bet2)^2)
p1 <- length(bet1)
p2 <- length(bet2)
n1 <- length(y)
fs <- abs((rss2-rss1)/(p2-p1))/(rss1/(n1-p1))
fpval <- 1-pf(fs, p1-p2, n1-p1)
hawu <- c(haus,hpvl,fs,fpval)
hawu <- c(fs,fpval)
hawu <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),hawu)),ncol=length(hawu))
colnames(hawu) <- c("Durbin-Wu-Hausman chi-sq test","p-val","Wu-Hausman F-test","p-val")
colnames(hawu) <- c("Wu-Hausman F-test","p-val")
Sargan Over-id test
ivres <- y - (x %*% biv)
oid <- solve(crossprod(z)) %*% crossprod(z,ivres)
sstot <- sum((ivres-mean(ivres))^2)
sserr <- sum((ivres - (z %*% oid))^2)
rsq <- 1-(sserr/sstot)
sargan <- length(ivres)*rsq
spval <- 1-pchisq(sargan,df=length(iv)-1)
overid <- c(sargan,spval)
overid <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),overid)),ncol=length(overid))
colnames(overid) <- c("Sargan test of over-identifying restrictions","p-val")
if(length(iv)-1==0){
overid <- t(matrix(c("No test performed. Model is just identified")))
colnames(overid) <- c("Sargan test of over-identifying restrictions")
}
full <- list(results=res, weakidtest=firststage, endogeneity=hawu, overid=overid)
return(full)
}
These models give the first-stage F-stats, Wu-Hausman and Sargan test results
m3.1f<-ivreg2(form=log(gasPerCap)~gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+gasPriceRealBC+cTaxRealCents:QC+CarbTax+factor(Ref_Date)+factor(GEO)-1,endog="gasPriceRealBC",iv=c("Excise_RealBC"),data=na.omit(Data_Gas_Month_Dom))
m3.2f<-ivreg2(form=log(perCapGas)~RealGasPrice:AB+RealGasPrice:BC+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxBC+cTaxRealCent:QC+factor(YEAR)+factor(GEO)-1,endog="cTaxBC",iv=c("lPITBC","lCITBC"),data=na.omit(annual_data_Dom))
m3.1f
m3.2f
m3.3<-plm(log(perCapGas)~RealGasPriceBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxBC+cTaxRealCent:QC+factor(GEO)|excise_realBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+lPITBC+lCITBC+cTaxRealCent:QC+factor(GEO),index=c("GEO","YEAR"),data=na.omit(annual_data_Dom),model="within",effects="time")
m3.3a<-plm(log(perCapGas)~RealGasPriceBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxBC+cTaxRealCent:QC+factor(YEAR)-1,index=c("GEO","YEAR"),data=na.omit(annual_data_Dom),model="pooling",effects="time")
phtest(m3.3,m3.3a)
attach(annual_data_Dom)
DAT<-na.omit(annual_data_Dom)
detach(annual_data_Dom)
DAT$Res<-residuals(m3.3<-plm(log(perCapGas)~RealGasPriceBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxBC+cTaxRealCent:QC+factor(GEO)|excise_realBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+lPITBC+lCITBC+cTaxRealCent:QC+factor(GEO),index=c("GEO","YEAR"),data=na.omit(annual_data_Dom),model="within",effects="time"))
sarg3.3<-lm(Res~excise_realBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+lPITBC+lCITBC+cTaxRealCent:QC+factor(GEO)+factor(YEAR),data=DAT)
sargtest3.3<- summary(sarg3.3)$r.squared*nobs(sarg3.3)
SARG3.3<-1-pchisq(sargtest3.3,df=1)
sargtest3.3
SARG3.3
Calculating the AP F-stat for model 3.3
Combined first-stage models
attach(annual_data_Dom)
Data1<-na.omit(annual_data_Dom)
detach(annual_data_Dom)
GasEq<-RealGasPriceBC~excise_realBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxRealCent:QC+factor(YEAR)-1
CTaxEq<-cTaxBC~lPITBC+lCITBC++RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxRealCent:QC+factor(YEAR)-1
system<-list(Eq1=GasEq,Eq2=CTaxEq)
m3.3x<-systemfit(system,data=Data1)
resm3.3a<-residuals(m3.3x$eq[[1]])
resm3.3b<-residuals(m3.3x$eq[[2]])
Data2<-merge(Data1,resm3.3a,by=0)
Data3<-merge(Data1,resm3.3b,by=0)
AP_F_Gas<-lm(RealGasPriceBC~excise_realBC+RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxRealCent:QC+factor(YEAR)+y-1,data=Data3)
AP_F_cTAX<-lm(cTaxBC~lPITBC+lCITBC++RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+cTaxRealCent:QC+factor(YEAR)+y-1,data=Data2)
restrict1<-"excise_realBC=0"
restrict2<-"lPITBC+lCITBC=0"
linearHypothesis(AP_F_Gas,restrict1,test="F")
linearHypothesis(AP_F_cTAX,restrict2,test="F")
Coefficient and standard error estimates for TABLE 3.
m3.1<-plm(log(gasPerCap)~gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+gasPriceRealBC+cTaxRealCents:QC+CarbTax+factor(Ref_Date)+factor(GEO)-1|gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+Excise_RealBC+cTaxRealCents:QC+CarbTax+factor(Ref_Date)+factor(GEO)-1,index=c("GEO","Ref_Date"),data=na.omit(Data_Gas_Month_Dom),model="pooling")
m3.2<-<-plm(log(perCapGas)~RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+RealGasPriceBC+cTaxBC+cTaxRealCent:QC+factor(YEAR)+factor(GEO)-1|RealGasPrice:AB+RealGasPrice:MN+RealGasPrice:NB+RealGasPrice:NFLD+RealGasPrice:NS+RealGasPrice:ON+RealGasPrice:PEI+RealGasPrice:QC+RealGasPrice:SK+RealGasPriceBC+lPITBC+lCITBC+cTaxRealCent:QC+factor(YEAR)+factor(GEO)-1,index=c("GEO","YEAR"),model="pooling",data=na.omit(annual_data_Dom))
StdErrorm3.1<-vcovHC(m3.1)
StdErrorm3.2<-vcovHC(m3.2)
StdErrorm3.3<-vcovHC(m3.3)
coeftest(m3.1,vcov.=StdErrorm3.1)
coeftest(m3.2,vcov.=StdErrorm3.2)
coeftest(m3.3,vcov.=StdErrorm3.3)
linearHypothesis(m3.1,"gasPriceRealBC = CarbTax",white.adjust=T)
linearHypothesis(m3.2,"RealGasPriceBC = cTaxBC",white.adjust=T)
linearHypothesis(m3.3, "RealGasPriceBC = cTaxBC", white.adjust=T)
TABLE 4 - Robustness Checks
Add disposable income to the model
attach(Data_Gas_Month_Dom)
inc<-Inc_Real/100
detach(Data_Gas_Month_Dom)
m4.1<-lm(log(gasPerCap)~gasPriceReal:BC+gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+cTaxRealCents:BC+cTaxRealCents:QC+inc+factor(Ref_Date)+factor(GEO)-1,data=Data_Gas_Month_Dom)
StdErrorm4.1<-vcovHAC(m6.1)
coeftest(m4.1,vcov.=StdErrorm4.1)
nobs(m4.1)
First Differenced Model
m4.2<-plm(log(gasPerCap)~gasPriceReal:GEO+cTaxRealCents:GEO+inc,data=Data_Gas_Month_Dom,index=c("GEO","Ref_Date"),model="fd")
summary(m4.2)
Instrument Real Carbon Tax with Nominal
m4.3f<-ivreg2(form=log(gasPerCap)~gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+gasPriceRealBC+cTaxRealCents:QC+CarbTax+factor(Ref_Date)+factor(GEO)-1,endog="CarbTax",iv=c("ctaxNom"),data=na.omit(Data_Gas_Month_Dom))
m4.3<-plm(log(gasPerCap)~gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+gasPriceRealBC+cTaxRealCents:QC+cTaxRealCents:BC+factor(Ref_Date)+factor(GEO)-1|gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+gasPriceReal:BC+cTaxRealCents:QC+ctaxNom+factor(Ref_Date)+factor(GEO)-1,index=c("GEO","Ref_Date"),data=na.omit(Data_Gas_Month_Dom),model="pooling")
StdErrorm4.3<-vcovHC(m4.3)
coeftest(m4.3,vcov.=StdErrorm4.3)
Drop June and July from the monthly model
attach(Data_Gas_Month_Dom)
Data_Gas_Month_Dom_xJJ<-Data_Gas_Month_Dom[Data_Gas_Month_Dom$month!=6,]
Data_Gas_Month_Dom_xJJ<-Data_Gas_Month_Dom_xJJ[Data_Gas_Month_Dom_xJJ$month!=7,]
detach(Data_Gas_Month_Dom)
m4.4<-lm(log(gasPerCap)~gasPriceReal:GEO+cTaxRealCents:GEO+factor(Ref_Date)+factor(GEO)-1,data=Data_Gas_Month_Dom_xJJ)
coeftest(m4.4,vcov.=vcovHAC)
Drop May through August from monthly model
attach(Data_Gas_Month_Dom)
Data_Gas_Month_Dom_xMA<-Data_Gas_Month_Dom_xJJ[Data_Gas_Month_Dom_xJJ$month!=5,]
Data_Gas_Month_Dom_xMA<-Data_Gas_Month_Dom_xMA[Data_Gas_Month_Dom_xMA$month!=8,]
detach(Data_Gas_Month_Dom)
m4.5<-lm(log(gasPerCap)~gasPriceReal*GEO-gasPriceReal+cTaxRealCents:QC+cTaxRealCents:BC+factor(Ref_Date)-1,data=Data_Gas_Month_Dom_xMA)
coeftest(m4.5,vcov.=vcovHAC)
Coincident preference change
attach(Data_Gas_Month_Dom)
Data3<-subset(Data_Gas_Month_Dom,year>2006,select=c(Ref_Date,GEO, gasPerCap,gasPriceReal,cTaxRealCents,Inc_Real))
detach(Data_Gas_Month_Dom)
m4.6<-lm(log(gasPerCap)~gasPriceReal*GEO-gasPriceReal+cTaxRealCents:GEO+factor(Ref_Date)-1,data=Data3)
coeftest(m4.6,vcov.=vcovHAC)
Assign full carbon tax at start
attach(Data_Gas_Month_Dom)
Data4<-Data_Gas_Month_Dom
detach(Data_Gas_Month_Dom)
attach(Data4)
Data4$ctaxNom[Data4$GEO=="British Columbia" & Data4$year=="2008" & Data4$month>"6"] <- 30
Data4$ctaxNom[Data4$GEO=="British Columbia" & Data4$year=="2008" & Data4$month>="10"] <- 30
Data4$ctaxNom[Data4$GEO=="British Columbia" & Data4$year>"2008"] <- 30
Data4$cTaxReal <- Data4$ctaxNom / Data4$CPI * 100
Data4$cTaxRealCents <- Data4$cTaxReal * 2.4 / 10
detach(Data4)
m4.7<-lm(log(gasPerCap)~gasPriceReal*GEO-gasPriceReal+cTaxRealCents:BC+cTaxRealCents:QC+factor(Ref_Date)-1,data=Data4)
StdErrorm4.7<-vcovHAC(m4.7)
coeftest(m4.7,vcov.=StdErrorm4.7)
linearHypothesis(m4.7, "gasPriceReal:GEOBritish Columbia = cTaxRealCents:BC", white.adjust=T)
nobs(m4.7)
Interact prov and month
m4.8<-lm(log(gasPerCap)~gasPriceReal+cTaxRealCents+year+factor(GEO)*factor(month)-1,data=Data_Gas_Month_Dom)
coeftest(m4.8,vcov.=vcovHAC)
Add share of small and subcompact car sales to the model
m4.10<-lm(log(perCapGas)~RealGasPrice*GEO-RealGasPrice+cTaxRealCent:QC+cTaxRealCent:BC+sm_sh_all+factor(YEAR)-1,data=annual_data_Dom)
m4.9<-lm(log(perCapGas)~RealGasPrice*GEO-RealGasPrice+cTaxRealCent:QC+cTaxRealCent:BC+sm_sh_car+factor(YEAR)-1,data=annual_data_Dom)
coeftest(m4.9,vcov.=vcovHAC)
coeftest(m4.10,vcov.=vcovHAC)
Code for Figure 2
Adapted from:
Code to create 'coefficient plots' as an alternative to
tables for regression models.
June 29, 2012
Written by Carlisle Rainey.
http://www.carlislerainey.com/
Model 2 from Table 2
p1 <- lm(log(gasPerCap)~gasPriceReal:BC+gasPriceReal:AB+gasPriceReal:MN+gasPriceReal:NB+gasPriceReal:NFLD+gasPriceReal:NS+gasPriceReal:ON+gasPriceReal:PEI+gasPriceReal:QC+gasPriceReal:SK+cTaxRealCents:BC+cTaxRealCents:QC+factor(Ref_Date)+factor(GEO)-1,data=Data_Gas_Month_Dom)
create a vector to store the variable names
var.names <- c("% change in gasoline demand from a one cent\nincrease in the market price of gasoline", "% change in gasoline demand from a one cent\nincrease in the carbon tax")
Code for the figure with corrected errors
par(
family = "serif",
oma = c(0,0,0,0),
mar = c(7,3,7,3)  # margins adjusted to reflect changing the locations of the labels
)
plot(NULL,
xlim = c(-0.035, 0.015),
ylim = c(.7, length(var.names) + 0.5),
axes = F, xlab = NA, ylab = NA)
est <- coef(p1)[c("gasPriceReal:BC","BC:cTaxRealCents")]
se <- sqrt(diag(vcovHC(p1)))[c("gasPriceReal:BC","BC:cTaxRealCents")]
for (i in 1:length(est)) {
points(est[i], i, pch = 19, cex = 1.0)
lines(c(est[i] + 1.96*se[i], est[i] - 1.96*se[i]), c(i, i))
lines(c(est[i] + .67*se[i], est[i] - .67*se[i]), c(i, i), lwd = 3)
text(est[i], i, var.names[i], xpd = T, cex = .8, pos = 3)           # add variable labels above the points
}
axis(side = 1)
abline(v = 0, lty = 3, col = "grey")
mtext(side = 1, "Least Squares Coefficient from a Log-Linear Model", line = 3)
mtext(side = 3, "Least Squares Estimates of the Effect of\n Market Prices and Carbon Taxes on per Capita Gasoline Demand", line = 1)
legend("topright",legend=c("95% Confidence Interval","50% Confidence Interval"),lwd=1:3,cex=0.8)
box()
version
install.packages(c("readr", "dplyr", "haven"))
install.packages("psych")
getwd()
getwd()
setwd("/Users/matthewtarduno/Desktop/212/Section02")
# Create a vector called 'vec'
vec <- c(1, 2, 3, 4, 5)
# Print the vector named 'vec'
vec
# Create a vector called 'vec'
vec <- c(1, 2, 3, 4, 5)
# Print the vector named 'vec'
vec
# Create a vector of the sequence from 1 to 5 and store it as 'vec2'
vec2 <- 1:5
# Print 'vec2'
vec2
# Are the two vectors' elements equal?
vec2 == vec
# Create a vector of the sequence from 1 to 5 and store it as 'vec2'
vec2 <- 1:5
# Print 'vec2'
vec2
# Are the two vectors' elements equal?
vec2 == vec
# Are the two vectors equal?
all.equal(vec, vec2)
# The class function
class(vec23)
# Check overall equality
all.equal(vec, vec3)
# Create a new vector by combining 'vec2' and 'vec3'
vec23 <- c(vec2, vec3)
# Print the new vector
vec23
# The class function
class(vec23)
# The is.vector function
is.vector(vec23)
# Create a new vector by combining 'vec2' and 'vec3'
vec23 <- c(vec2, vec3)
# Print the new vector
vec23
# Create another numeric vector
vec3 <- c(1, 2, 8:10)
# Print it
vec3
Check element-wise equality
vec == vec3
# Check overall equality
all.equal(vec, vec3)
# Create a new vector by combining 'vec2' and 'vec3'
vec23 <- c(vec2, vec3)
# Print the new vector
vec23
# The class function
class(vec23)
# The is.vector function
is.vector(vec23)
# The is.vector function
is.vector(vec23)
# The dimension function
dim(vec23)
# The length function
length(vec23)
# Character vectors ------------------------
# Create the string vector using quotation marks
str_vec <- c("Aren't", "vectors", "exciting", "?")
# Print it
str_vec
# Create the string vector using quotation marks
str_vec <- c("Aren't", "vectors", "exciting", "?")
# Print it
str_vec
# Check its class
class(str_vec)
str_vec[3]
# Create the string vector using quotation marks
str_vec <- c("Aren't", "vectors", "exciting", "?")
# Print it
str_vec
# Check its class
class(str_vec)
str_vec[3]
# Create a vector of the numeric vector 'vec' and the character vector 'str_vec'
mix_vec <- c(vec, str_vec)
# Print the result
mix_vec
# Check the class of the new vector (defaults to character when mixed)
class(mix_vec)
# Matrices -----------------------------
# Create a 3x2 matrix filled with the sequence 1:6
A <- matrix(data = 1:6, ncol = 2)
# Print it
A
# Using the byrow option
B <- matrix(data = 1:6, ncol = 3, byrow = TRUE)
# Print B
B
# Check element by element
t(A) == B
# Check if all the element-by-element comparisons are TRUE
all(t(A) == B)
# Check if the transpose of A is identical to B
identical(t(A), B)
# Elementwise multiplication of A and A
A * A
# Matrix multiplication of A and itself
A %*% A
#scalar
A * 3
# Create C
C <- matrix(data = 1:4, ncol = 2)
# Multiply A and C
A %*% C
diag(5)
# Grab the diagonal elements of the matrix C
diag(C)
# The trace of a matrix using the psych package's tr()
library(psych)
tr(C)
sum(diag(C))
# Bind a column of ones in front of the matrix A (probably useful...)
cbind(c(1, 1, 1), A)
library(psych)
tr(C)
sum(diag(C))
# Bind a column of ones in front of the matrix A (probably useful...)
cbind(c(1, 1, 1), A)
#also works, but be careful, CJ
cbind(1, A)
#just binding other stuff, I guess...
rbind(A, c(3, 6))
#can also bind matricies, if their dimensions match!
rbind(A, C)
