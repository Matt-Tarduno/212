# Calculate y = 7 + 0.5 x + e; drop 'e'
data_df %<>% mutate(y_a = 3 + 1*x1  - 2*x2 + e)
data_df %<>% mutate(y_b = 3 + 1*x1  - 2*x2 + eta)
# Return data_df
return(data_df)
}
gen_data(100)
part2_data<-gen_data(100)
View(part2_data)
mean(data$x2)
mean(part2_data$x2)
part2_data<-gen_data(100000)
mean(data$x2)
mean(part2_data$x2)
one_sim <- function(sample_size) {
# Estimate via OLS
ols_est <- ols(data = data, y_var = "y", X_vars = c("x1", "x2"))
# Grab the estimated coefficient on x
# (the second element of 'coef')
b1 <- ols_est %$% coef[2]
b2 <- ols_est %$% coef[3]
# Grab the second p-value
# (the first p-value is for the intercept)
p_value1 <- ols_est %$% p_value[2]
p_value2 <- ols_est %$% p_value[3]
# Return a data.frame with b1 and p_value
return(data.frame(b1, p_value1, b2, p_value2))
}
one_sim(10)
one_sim <- function(sample_size) {
# Estimate via OLS
ols_est <- ols(data = data, y_var = "ya", X_vars = c("x1", "x2"))
# Grab the estimated coefficient on x
# (the second element of 'coef')
b1 <- ols_est %$% coef[2]
b2 <- ols_est %$% coef[3]
# Grab the second p-value
# (the first p-value is for the intercept)
p_value1 <- ols_est %$% p_value[2]
p_value2 <- ols_est %$% p_value[3]
# Return a data.frame with b1 and p_value
return(data.frame(b1, p_value1, b2, p_value2))
}
one_sim(10)
one_sim <- function(sample_size) {
# Estimate via OLS
ols_est <- ols(data = data, y_var = "y_a", X_vars = c("x1", "x2"))
# Grab the estimated coefficient on x
# (the second element of 'coef')
b1 <- ols_est %$% coef[2]
b2 <- ols_est %$% coef[3]
# Grab the second p-value
# (the first p-value is for the intercept)
p_value1 <- ols_est %$% p_value[2]
p_value2 <- ols_est %$% p_value[3]
# Return a data.frame with b1 and p_value
return(data.frame(b1, p_value1, b2, p_value2))
}
one_sim(10)
# Function to generate data
gen_data <- function(sample_size) {
# Create data.frame with random x and error
data_df <- data.frame(
x1 = rnorm(sample_size, 0, 5),
x2 = rnorm(sample_size, 0, 5),
e = rnorm(sample_size, 0, 5),
eta = runif(sample_size, -8.66, 8.66))
# Calculate y = 7 + 0.5 x + e; drop 'e'
data_df %<>% mutate(y_a = 3 + 1*x1  - 2*x2 + e)
data_df %<>% mutate(y_b = 3 + 1*x1  - 2*x2 + eta)
# Return data_df
return(data_df)
}
data<-gen_data(100000)
# Function to generate data
gen_data <- function(sample_size) {
# Create data.frame with random x and error
data_df <- data.frame(
x1 = rnorm(sample_size, 0, 5),
x2 = rnorm(sample_size, 0, 5),
e = rnorm(sample_size, 0, 5),
eta = runif(sample_size, -8.66, 8.66))
# Calculate y = 7 + 0.5 x + e; drop 'e'
data_df %<>% mutate(y_a = 3 + 1*x1  - 2*x2 + e)
data_df %<>% mutate(y_b = 3 + 1*x1  - 2*x2 + eta)
# Return data_df
return(data_df)
}
data<-gen_data(100000)
one_sim <- function(sample_size) {
# Estimate via OLS
ols_est <- ols(data = data, y_var = "y_a", X_vars = c("x1", "x2"))
# Grab the estimated coefficient on x
# (the second element of 'coef')
b1 <- ols_est %$% coef[2]
b2 <- ols_est %$% coef[3]
# Grab the second p-value
# (the first p-value is for the intercept)
p_value1 <- ols_est %$% p_value[2]
p_value2 <- ols_est %$% p_value[3]
# Return a data.frame with b1 and p_value
return(data.frame(b1, p_value1, b2, p_value2))
}
one_sim(10)
one_sim()
one_sim_a <- function() {
# Estimate via OLS
ols_est <- ols(data = data, y_var = "y_a", X_vars = c("x1", "x2"))
# Grab the estimated coefficient on x
# (the second element of 'coef')
b1 <- ols_est %$% coef[2]
b2 <- ols_est %$% coef[3]
# Grab the second p-value
# (the first p-value is for the intercept)
p_value1 <- ols_est %$% p_value[2]
p_value2 <- ols_est %$% p_value[3]
# Return a data.frame with b1 and p_value
return(data.frame(b1, p_value1, b2, p_value2))
}
one_sim()
sample_size=100000
data_df <- data.frame(
x1 = rnorm(sample_size, 0, 5),
x2 = rnorm(sample_size, 0, 5),
e = rnorm(sample_size, 0, 5),
eta = runif(sample_size, -8.66, 8.66))
# Calculate y = 7 + 0.5 x + e; drop 'e'
data_df %<>% mutate(y_a = 3 + 1*x1  - 2*x2 + e)
data_df %<>% mutate(y_b = 3 + 1*x1  - 2*x2 + eta)
View(data_df)
dim(data_df)
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef"), 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
one_run(data_df, 10)
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "data_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df) %>% bind_rows() %>% tbl_df()
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef"), 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "data_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
View(sim_df)
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef1", "coef2"), 3),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "data_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef"), 2),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
coef_ols <- b_ols(
y = to_matrix(data_df, "y_a"),
X = to_matrix(data_df, c("x1", "x2")))
View(coef_ols)
sample_size=100000
data_df <- data.frame(
i = 1,
x1 = rnorm(sample_size, 0, 5),
x2 = rnorm(sample_size, 0, 5),
e = rnorm(sample_size, 0, 5),
eta = runif(sample_size, -8.66, 8.66))
# Calculate y = 7 + 0.5 x + e; drop 'e'
data_df %<>% mutate(y_a = 3 + 1*x1  - 2*x2 + e)
data_df %<>% mutate(y_b = 3 + 1*x1  - 2*x2 + eta)
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("i", "x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef"), 2),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("i", "x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "coef"), 3),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "data_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
coef_ols <- b_ols(
y = to_matrix(data_df, "y_a"),
X = to_matrix(data_df, c("x1", "x2")))
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("i", "x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = rep(c("int", "b1", "b2"), 3),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
coef_ols <- b_ols(
y = to_matrix(data_df, "y_a"),
X = to_matrix(data_df, c("i", "x1", "x2"))
)
coef_ols <- b_ols(
y = to_matrix(data_df, "y_a"),
X = to_matrix(data_df, c("i", "x1", "x2")))
# Function for a single iteration of the simulation
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_a"),
X = to_matrix(sample_df, c("i", "x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = c("int", "b1", "b2"),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
sim_df <- parLapply(
cl = cl,
X = 1:100,
fun = one_run,
population = data_df, size=10) %>% bind_rows() %>% tbl_df()
ggplot(data = filter(sim_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.7) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density")
plot_data<-subset(sim_df,  param!= "b2")
View(plot_data)
plot_data<-subset(sim_df,  param == "b2")
ggplot(plot_data, aes(est)) + geom_histogram()
ggplot(plot_data, aes(est)) + geom_histogram() +stat_bin(bins=100)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.01)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.1)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.05)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.01)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.1)
sim_df <- parLapply(
cl = cl,
X = 1:1000,
fun = one_run,
population = data_df, size=1000) %>% bind_rows() %>% tbl_df()
# Plot a separate histogram of the estimated β2’s for each sample size:
plot_data<-subset(sim_df,  param == "b2")
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.1)
# Overlay a density of what the theoretical distribution of β2 should look like. What do you notice?
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.01)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.001)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.05)
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.005)
sim_df <- parLapply(
cl = cl,
X = 1:1000,
fun = one_run,
population = data_df, size=1000) %>% bind_rows() %>% tbl_df()
# Plot a separate histogram of the estimated β2’s for each sample size:
plot_data<-subset(sim_df,  param == "b2")
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.005)
# Overlay a density of what the theoretical distribution of β2 should look like. What do you notice?
one_run <- function(iter, population, size) {
sample_df <- sample_n(tbl = population, size)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y_b"),
X = to_matrix(sample_df, c("i", "x1", "x2")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(coef_ols),
param  = c("int", "b1", "b2"),
iter   = iter
)
# Return the data.frame
print(coef_ols)
return(coef_df)
}
sim_df <- parLapply(
cl = cl,
X = 1:1000,
fun = one_run,
population = data_df, size=1000) %>% bind_rows() %>% tbl_df()
# Plot a separate histogram of the estimated β2’s for each sample size:
plot_data<-subset(sim_df,  param == "b2")
ggplot(plot_data, aes(est)) + geom_histogram(binwidth = 0.005)
# Overlay a density of what the theoretical distribution of β2 should look like. What do you notice?
