x <- c(3, 5, 7, 9)
x[2]
x[c(2, 3)]
x[2:3]
2:3
# Indexing the car subset
car_sub[1, ]
2:3
2:7
x[2:3]
i<diag(5)
i<dia(5)
i<-diag(5)
i
i*i
t(i)
t[,1]
i[,1]
for (line in 1:5){
new_row<-t(i[,line])
C<-rbind(C,new_row)
}
for (line in 1:5){
new_row<-c(t(i[,line]))
C<-rbind(C,new_row)
}
for (line in 1:5){
print(i[,line])
}
for (line in 1:5){
new_row<-c(i[,line])
C<-rbind(C,new_row)
}
for (line in 1:5){
new_row<-c(i[,line])
print(new_row)
}
c<-[]
c<-c()
for (line in 1:5){
new_row<-c(i[,line])
print(new_row)
c<-rbind(new_row)
}
c
A<-c()
for (line in 1:5){
new_row<-c(i[,line])
print(new_row)
A<-rbind(new_row)
}
A
A<-c()
for (line in 1:5){
new_row<-c(i[,line])
print(new_row)
A<-cbind(new_row)
}
A
A<-c(0,0,0,0,0)
for (row in 1:5){
new_row<-c(i[row,])
print(new_row)
A<-rbind(new_row)
}
A
# Puzzle one
i<-diag(5)
i
t(i)
A<-c(0,0,0,0,0)
for (row in 1:5){
new_row<-c(i[row,])
print(new_row)
A<-rbind(new_row)
}
A
A<-r(0,0,0,0,0)
for (row in 1:5){
new_row<-c(i[row,])
print(new_row)
A<-rbind(new_row)
}
A
i
i[2,3]
for (row in 1:5){
for (column in 1:5)
new_element<-i[column,row]
l<-c(l, new_element)
}
l<-c()
l<-c()
for (row in 1:5){
for (column in 1:5)
new_element<-i[column,row]
l<-c(l, new_element)
}
l
new_element
l
l<-c()
for (row in 1:5){
for (column in 1:5){
new_element<-i[column,row]
l<-c(l, new_element)
}
}
l
l<-c()
for (row in 1:5){
for (column in 1:5){
new_element<-i[column,row]
l<-c(l, new_element)
}
}
l<-matrix(l, nrow = 5, ncol = 5)
l
?fun
?function
invert.matrix <- function(mat) {
c<-c() #a blank vector
for (row in 1:5){
for (column in 1:5){
new_element<-mat[column,row]
c<-c(l, new_element)
}
}
c<-matrix(l, nrow = 5, ncol = 5)
}
i
invert.matrix(i)
a<-invert.matrix(i)
a
dim(i)
dim(i)[0]
dim(i)[1]
dim(i)[2]
invert.matrix <- function(mat) {
c<-c() #a blank vector
for (row in 1:dim(i)[1]){
for (column in 1:dim(i)[2]){
new_element<-mat[column,row]
c<-c(l, new_element)
}
}
c<-matrix(l, nrow = dim(i)[2], ncol = dim(i)[1])
}
A<-matrix(c(1,2,3,4,5,6), nrow=2, ncol = 3)
A
invert.matrix(A)
invert.matrix <- function(mat) {
c<-c() #a blank vector
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
new_element<-mat[column,row]
c<-c(l, new_element)
}
}
c<-matrix(l, nrow = dim(i)[2], ncol = dim(i)[1])
}
invert.matrix(A)
invert.matrix <- function(mat) {
c<-c() #a blank vector
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
new_element<-mat[column,row]
c<-c(l, new_element)
}
}
c<-matrix(l, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
A
c
invert.matrix <- function(mat) {
c<-c() #a blank vector
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
new_element<-mat[column,row]
c<-c(c, new_element)
}
}
c<-matrix(c, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
c
invert.matrix(A)
invert.matrix <- function(mat) {
M<-c() #a blank vector
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
new_element<-mat[column,row]
M<-c(M, new_element)
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
invert.matrix(A)
invert.matrix <- function(mat) {
M<-c() #a blank vector
print(dim(mat)[1])
print(dim(mat)[2])
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
new_element<-mat[column,row]
M<-c(M, new_element)
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
invert.matrix(A)
A
M
invert.matrix <- function(mat) {
M<-c() #a blank vector
print(dim(mat)[1])
print(dim(mat)[2])
for (row in 1:dim(mat)[1]){
for (column in 1:dim(mat)[2]){
#new_element<-mat[column,row]
#M<-c(M, new_element)
print(mat[column,row])
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
invert.matrix <- function(mat) {
M<-c() #a blank vector
print(dim(mat)[1])
print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
print(mat[column,row])
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
A
invert.matrix(A)
invert.matrix <- function(mat) {
M<-c() #a blank vector
print(dim(mat)[1])
print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
#print(mat[column,row])
}
}
#M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
}
invert.matrix(A)
M
invert.matrix <- function(mat) {
M<-c() #a blank vector
print(dim(mat)[1])
print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
#print(mat[column,row])
}
}
#M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
return(M)
}
invert.matrix(A)
invert.matrix <- function(mat) {
M<-c() #a blank vector
#print(dim(mat)[1])
#print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
print(new_element)
}
}
#M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
return(M)
}
M
invert.matrix(A)
dim(A)
A
invert.matrix <- function(mat) {
M<-c() #a blank vector
#print(dim(mat)[1])
#print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
print(M)
}
}
#M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
return(M)
}
invert.matrix(A)
A[1,2]
A
A[2,1]
A
invert.matrix <- function(mat) {
M<-c() #a blank vector
#print(dim(mat)[1])
#print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
print(M)
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1])
return(M)
}
invert.matrix(A)
M
D<-invert.matrix(A)
D
A
A<-matrix(c(1,2,3,4,5,6), byrow = 'True')
A
A<-matrix(c(1,2,3,4,5,6), nrow=2, ncol=3, byrow = 'True')
A
invert.matrix <- function(mat) {
M<-c() #a blank vector
#print(dim(mat)[1])
#print(dim(mat)[2])
for (column in 1:dim(mat)[2]){
for (row in 1:dim(mat)[1]){
new_element<-mat[row,column]
M<-c(M, new_element)
print(M)
}
}
M<-matrix(M, nrow = dim(mat)[2], ncol = dim(mat)[1], byrow='True')
return(M)
}
A
D<-invert.matrix(A)
D
D.type()
typeof(D)
typeof(A)
A<-matrix(c(.5, .25, 1, .5), nrow = 2, ncol = 2, byrow = 'True')
A
A*A
A<-matrix(c(.5, .5, .5, .5), nrow = 2, ncol = 2, byrow = 'True')
A*A
A<-matrix(c(.5, .25, 1, .5), nrow = 2, ncol = 2, byrow = 'True')
A*A
A
A%*%A
matrix.multiply <- function(mat1, mat2) {
M<-c() #a blank vector
for (column2 in 1:dim(mat2)[2]){
for (row in 1:dim(mat1)[1]){
new_element<-0
for (column in 1:dim(mat1)[2]){
new_element<-new_element+mat1[row,column]*mat1[column,column2]
}
}
M<-c(M, new_element)
}
}
A
matrix.multiply <- function(mat1, mat2) {
M<-c() #a blank vector
for (column2 in 1:dim(mat2)[2]){
for (row in 1:dim(mat1)[1]){
new_element<-0
for (column in 1:dim(mat1)[2]){
new_element<-new_element+mat1[row,column]*mat1[column,column2]
}
}
M<-c(M, new_element)
}
return(M)
}
A
matrix.multiply(A,A)
matrix.multiply <- function(mat1, mat2) {
M<-c() #a blank vector
for (column2 in 1:dim(mat2)[2]){
for (row in 1:dim(mat1)[1]){
new_element<-0
for (column in 1:dim(mat1)[2]){
new_element<-new_element+mat1[row,column]*mat1[column,column2]
}
}
M<-c(M, new_element)
print(M)
}
M<-matrix(M, nrow = dim(mat)[1], ncol = dim(mat2)[2], byrow='True')
return(M)
}
matrix.multiply(A,A)
matrix.multiply <- function(mat1, mat2) {
M<-c() #a blank vector
for (row in 1:dim(mat1)[1]){
for (column2 in 1:dim(mat2)[2]){
new_element<-0
for (column in 1:dim(mat1)[2]){
new_element<-new_element+mat1[row,column]*mat1[column,column2]
}
}
M<-c(M, new_element)
print(M)
}
M<-matrix(M, nrow = dim(mat)[1], ncol = dim(mat2)[2], byrow='True')
return(M)
}
matrix.multiply(A,A)
a<rnorm
a<rnorm(1)
a<-rnorm(1)
a
a<-rnorm(1)
a
a<-rnorm(1)
a
a<-rnorm(1)
a
generate.rv <- function(dimension) {
M<-c() #a blank vector
for (i in dimension){
M<c(c, rnorm(1))
}
return(M)
}
x<-generate.rv(100)
x
generate.rv <- function(dimension) {
M<-c() #a blank vector
for (i in dimension){
M<c(c, rnorm(1))
print(M)
}
return(M)
}
x<-generate.rv(100)
generate.rv(100)
generate.rv <- function(dimension) {
M<-c() #a blank vector
for (i in dimension){
M<-c(c, rnorm(1))
print(M)
}
return(M)
}
generate.rv(100)
x<-generate.rv(100)
x
generate.rv <- function(dimension) {
M<-c() #a blank vector
for (i in dimension){
#M<-c(c, rnorm(1))
print(i)
}
#return(M)
}
x<-generate.rv(100)
generate.rv <- function(dimension) {
M<-c() #a blank vector
for (i in 1:dimension){
M<-c(c, rnorm(1))
print(i)
}
return(M)
}
x<-generate.rv(100)
x
x<-generate.rv(100)
x
generate.rv <- function(dimension) {
v<-c() #a blank vector
for (i in 1:dimension){
v<-c(v, rnorm(1))
print(i)
}
return(v)
}
x<-generate.rv(100)
x
generate.rv <- function(dimension) {
v<-c() #a blank vector
for (i in 1:dimension){
v<-c(v, rnorm(1))
}
return(v)
}
e<-generate.rv(100)
y<-x+e
y
lm(y ~ x+e)
